/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var W=Object.create;var D=Object.defineProperty;var q=Object.getOwnPropertyDescriptor;var K=Object.getOwnPropertyNames;var G=Object.getPrototypeOf,Q=Object.prototype.hasOwnProperty;var Y=(g,s)=>{for(var e in s)D(g,e,{get:s[e],enumerable:!0})},$=(g,s,e,t)=>{if(s&&typeof s=="object"||typeof s=="function")for(let i of K(s))!Q.call(g,i)&&i!==e&&D(g,i,{get:()=>s[i],enumerable:!(t=q(s,i))||t.enumerable});return g};var b=(g,s,e)=>(e=g!=null?W(G(g)):{},$(s||!g||!g.__esModule?D(e,"default",{value:g,enumerable:!0}):e,g)),J=g=>$(D({},"__esModule",{value:!0}),g);var X={};Y(X,{default:()=>O});module.exports=J(X);var C=require("obsidian");var x={vaults:[],deleteOriginalAfterMove:!0,preserveFileHistory:!1,showConfirmation:!0,recentDestinations:[]},F=["#e74c3c","#3498db","#2ecc71","#f39c12","#9b59b6","#1abc9c","#34495e","#e67e22","#16a085","#8e44ad"];var R=require("obsidian"),y=b(require("fs")),d=b(require("path")),H=b(require("os")),E=class{constructor(){this.vaultCache=new Map,this.commonVaultPaths=this.getCommonVaultPaths()}generateVaultId(){return`vault_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getCommonVaultPaths(){let s=H.homedir(),e=[];return process.platform==="win32"?e.push(d.join(s,"Documents","Obsidian"),d.join(s,"Documents","Obsidian Vaults"),d.join(s,"OneDrive","Documents","Obsidian"),d.join(s,"Obsidian"),"C:\\Obsidian","D:\\Obsidian"):process.platform==="darwin"?e.push(d.join(s,"Documents","Obsidian"),d.join(s,"Documents","Obsidian Vaults"),d.join(s,"Library","Mobile Documents","iCloud~md~obsidian","Documents"),d.join(s,"Obsidian"),d.join(s,"iCloud Drive","Obsidian")):e.push(d.join(s,"Documents","Obsidian"),d.join(s,"Documents","Obsidian Vaults"),d.join(s,"Obsidian"),d.join(s,".obsidian")),e}async validateVault(s){let e={isValid:!1,hasConfigFile:!1,hasPluginsFolder:!1,hasDataFile:!1};try{if(!y.existsSync(s))return e.error="Path does not exist",e;if(!y.statSync(s).isDirectory())return e.error="Path is not a directory",e;let i=d.join(s,".obsidian");if(y.existsSync(i)){e.hasConfigFile=!0;let a=d.join(i,"plugins");y.existsSync(a)&&(e.hasPluginsFolder=!0);let r=d.join(i,"app.json"),n=d.join(i,"workspace.json");(y.existsSync(r)||y.existsSync(n))&&(e.hasDataFile=!0)}e.isValid=e.hasConfigFile,!e.isValid&&!e.error&&(e.error="No .obsidian folder found. This might not be an Obsidian vault.")}catch(t){e.error=`Error validating vault: ${t.message}`}return e}async discoverVaults(){let s=[],e=new Set;for(let t of this.commonVaultPaths)if(y.existsSync(t))try{(await this.validateVault(t)).isValid&&!e.has(t)&&(e.add(t),s.push(this.createVaultConfig(t)));let a=y.readdirSync(t,{withFileTypes:!0});for(let r of a)if(r.isDirectory()&&!r.name.startsWith(".")){let n=d.join(t,r.name);if(e.has(n))continue;(await this.validateVault(n)).isValid&&(e.add(n),s.push(this.createVaultConfig(n)))}}catch(i){console.error(`Error scanning ${t}:`,i)}return s}createVaultConfig(s){let e=d.basename(s);return{id:this.generateVaultId(),name:e,path:s,isValid:!0,lastAccessed:Date.now()}}async addVault(s,e){let t=d.resolve(s),i=await this.validateVault(t);if(!i.isValid)return new R.Notice(`Invalid vault: ${i.error||"Unknown error"}`),null;let a={id:this.generateVaultId(),name:e||d.basename(t),path:t,isValid:!0,lastAccessed:Date.now()};return this.vaultCache.set(a.id,a),a}updateVault(s,e){let t=this.vaultCache.get(s);if(!t)return null;let i={...t,...e,id:t.id};return this.vaultCache.set(s,i),i}removeVault(s){return this.vaultCache.delete(s)}getAllVaults(){return Array.from(this.vaultCache.values())}getVault(s){return this.vaultCache.get(s)}loadVaults(s){this.vaultCache.clear();for(let e of s)this.vaultCache.set(e.id,e)}async revalidateAllVaults(){for(let s of this.vaultCache.values()){let e=await this.validateVault(s.path);s.isValid=e.isValid}}getFilePath(s,e){return d.join(s.path,e)}fileExists(s,e){let t=this.getFilePath(s,e);return y.existsSync(t)}async getVaultFolders(s){let e=["/"],t=(i,a="")=>{try{let r=y.readdirSync(i,{withFileTypes:!0});for(let n of r)if(n.isDirectory()&&!n.name.startsWith(".")){let o=a?`${a}/${n.name}`:n.name;e.push(`/${o}`),t(d.join(i,n.name),o)}}catch(r){console.error(`Error scanning directory ${i}:`,r)}};return t(s.path),e.sort()}getAvailableFilename(s,e){if(!this.fileExists(s,e))return e;let t=d.dirname(e),i=d.extname(e),a=d.basename(e,i),r=1,n=e;for(;this.fileExists(s,n);){let o=`${a} ${r}${i}`;n=d.join(t,o),r++}return n}async ensureDirectory(s){return new Promise((e,t)=>{y.mkdir(s,{recursive:!0},i=>{i?t(new Error(`Failed to create directory: ${i.message}`)):e()})})}};var h=require("obsidian");var w=require("obsidian");var M=class extends w.Modal{constructor(s,e,t,i){super(s),this.vaultManager=e,this.onSave=t,this.vault=i||null,this.isEditMode=!!i,this.selectedColor=(i==null?void 0:i.color)||F[0]}onOpen(){var n;let{contentEl:s}=this;s.empty(),s.createEl("h2",{text:this.isEditMode?"Edit Vault Configuration":"Add New Vault"}),new w.Setting(s).setName("Vault Path").setDesc("The full path to the Obsidian vault folder").addText(o=>{var c;return this.pathInput=o,o.setPlaceholder("/path/to/vault").setValue(((c=this.vault)==null?void 0:c.path)||"").onChange(async l=>{await this.validatePath(l)}),this.isEditMode&&o.setDisabled(!0),o}).addButton(o=>{o.setButtonText("Browse").setCta().onClick(async()=>{if(window.require)try{let{remote:c}=window.require("electron"),l=await c.dialog.showOpenDialog({properties:["openDirectory"],title:"Select Obsidian Vault"});if(!l.canceled&&l.filePaths[0]&&(this.pathInput.setValue(l.filePaths[0]),await this.validatePath(l.filePaths[0]),!this.nameInput.getValue())){let m=window.require("path");this.nameInput.setValue(m.basename(l.filePaths[0]))}}catch(c){console.error("Browse failed:",c),new w.Notice("Please enter the vault path manually")}else new w.Notice("Browse is not available. Please enter the path manually.")}),this.isEditMode&&(o.buttonEl.style.display="none")}),this.validationMessage=s.createDiv("validation-message"),this.validationMessage.style.marginTop="-10px",this.validationMessage.style.marginBottom="10px",this.validationMessage.style.fontSize="0.85em",new w.Setting(s).setName("Vault Name").setDesc("A friendly name for this vault").addText(o=>{var c;return this.nameInput=o,o.setPlaceholder("My Vault").setValue(((c=this.vault)==null?void 0:c.name)||""),o}),new w.Setting(s).setName("Description").setDesc("Optional description for this vault").addTextArea(o=>{var c;return this.descriptionInput=o,o.setPlaceholder("Work notes, personal journal, etc.").setValue(((c=this.vault)==null?void 0:c.description)||""),o.inputEl.rows=2,o});let t=new w.Setting(s).setName("Color").setDesc("Choose a color to identify this vault").controlEl.createDiv("color-picker-container");t.style.display="flex",t.style.gap="8px",t.style.flexWrap="wrap",F.forEach(o=>{let c=t.createEl("button",{cls:"color-picker-button"});c.style.width="30px",c.style.height="30px",c.style.backgroundColor=o,c.style.border=this.selectedColor===o?"2px solid var(--interactive-accent)":"1px solid var(--background-modifier-border)",c.style.borderRadius="4px",c.style.cursor="pointer",c.onclick=()=>{t.querySelectorAll(".color-picker-button").forEach(l=>{l.style.border="1px solid var(--background-modifier-border)"}),c.style.border="2px solid var(--interactive-accent)",this.selectedColor=o}});let i=s.createDiv("modal-button-container");i.style.display="flex",i.style.justifyContent="flex-end",i.style.gap="10px",i.style.marginTop="20px";let a=new w.ButtonComponent(i).setButtonText("Cancel").onClick(()=>{this.close()}),r=new w.ButtonComponent(i).setButtonText(this.isEditMode?"Save Changes":"Add Vault").setCta().onClick(async()=>{await this.saveVault()});this.isEditMode&&((n=this.vault)!=null&&n.path)&&this.validatePath(this.vault.path)}async validatePath(s){if(!s)return this.showValidationMessage("","normal"),!1;let e=await this.vaultManager.validateVault(s);return e.isValid?(this.showValidationMessage("\u2713 Valid Obsidian vault detected","success"),!0):(this.showValidationMessage(`\u26A0 ${e.error||"Not a valid Obsidian vault"}`,"error"),!1)}showValidationMessage(s,e){if(this.validationMessage.empty(),!!s)switch(this.validationMessage.textContent=s,e){case"success":this.validationMessage.style.color="var(--text-success)";break;case"error":this.validationMessage.style.color="var(--text-error)";break;default:this.validationMessage.style.color="var(--text-muted)"}}async saveVault(){let s=this.pathInput.getValue(),e=this.nameInput.getValue(),t=this.descriptionInput.getValue();if(!s){new w.Notice("Please enter a vault path");return}if(!e){new w.Notice("Please enter a vault name");return}let i=await this.validatePath(s);if(!i&&!this.isEditMode&&!confirm("This doesn't appear to be a valid Obsidian vault. Do you want to add it anyway?"))return;let a;this.isEditMode&&this.vault?a={...this.vault,name:e,description:t,color:this.selectedColor,lastAccessed:Date.now()}:a={id:this.vaultManager.generateVaultId(),name:e,path:s,description:t,color:this.selectedColor,isValid:i,lastAccessed:Date.now()},this.onSave(a),this.close()}onClose(){let{contentEl:s}=this;s.empty()}};var S=class extends h.PluginSettingTab{constructor(s,e,t){super(s,e),this.plugin=e,this.vaultManager=t}display(){let{containerEl:s}=this;s.empty(),s.createEl("h2",{text:"Teleporter Settings"}),this.createQuickActionsSection(s);let e=s.createDiv("hotkey-info");e.style.padding="10px",e.style.marginBottom="15px",e.style.borderRadius="5px",e.style.backgroundColor="var(--background-secondary-alt)",e.style.fontSize="0.9em";let t=e.createDiv();t.innerHTML='<strong>Tip:</strong> Set a hotkey for "Teleport current file" in Settings \u2192 Hotkeys';let i=this.app.hotkeyManager.customKeys,a="obsidian-teleporter:teleport-current-file";if(i&&i[a]){let n=i[a];if(n&&n.length>0){let o=n[0],c=o.modifiers.join("+"),l=c?`${c}+${o.key}`:o.key;t.innerHTML=`<strong>Current hotkey:</strong> <kbd>${l}</kbd> \u2022 Change in Settings \u2192 Hotkeys`}}s.createEl("h3",{text:"Configured Vaults"});let r=s.createDiv("vault-button-container");r.style.display="flex",r.style.gap="10px",r.style.marginBottom="15px",new h.ButtonComponent(r).setButtonText("Add Vault").setCta().onClick(()=>{this.openAddVaultModal()}),new h.ButtonComponent(r).setButtonText("Discover Vaults").onClick(async()=>{await this.discoverVaults()}),new h.ButtonComponent(r).setButtonText("Validate All").onClick(async()=>{await this.validateAllVaults()}),this.vaultListContainer=s.createDiv("vault-list-container"),this.displayVaultList(),s.createEl("h3",{text:"File Operations"}),new h.Setting(s).setName("Delete original after move").setDesc("Remove the file from the source vault after successful teleport").addToggle(n=>n.setValue(this.plugin.settings.deleteOriginalAfterMove).onChange(async o=>{this.plugin.settings.deleteOriginalAfterMove=o,await this.plugin.saveSettings()})),new h.Setting(s).setName("Preserve file history").setDesc("Maintain file creation and modification dates when moving files").addToggle(n=>n.setValue(this.plugin.settings.preserveFileHistory).onChange(async o=>{this.plugin.settings.preserveFileHistory=o,await this.plugin.saveSettings()})),new h.Setting(s).setName("Show confirmation dialog").setDesc("Ask for confirmation before teleporting files").addToggle(n=>n.setValue(this.plugin.settings.showConfirmation).onChange(async o=>{this.plugin.settings.showConfirmation=o,await this.plugin.saveSettings()})),this.createFooter(s)}createQuickActionsSection(s){let e=s.createDiv("teleporter-info-box");e.style.padding="10px",e.style.marginBottom="20px",e.style.borderRadius="5px",e.style.backgroundColor="var(--background-secondary)";let t=e.createDiv();t.style.display="flex",t.style.justifyContent="space-between",t.style.marginBottom="10px";let i=this.plugin.settings.vaults.length,a=this.plugin.settings.vaults.filter(r=>r.isValid).length;if(t.createEl("span",{text:`Vaults: ${a}/${i} valid`}),this.plugin.settings.lastUsedVaultId){let r=this.vaultManager.getVault(this.plugin.settings.lastUsedVaultId);r&&t.createEl("span",{text:`Last used: ${r.name}`})}}displayVaultList(){if(this.vaultListContainer.empty(),this.plugin.settings.vaults.length===0){let s=this.vaultListContainer.createDiv("empty-vault-message");s.style.padding="20px",s.style.textAlign="center",s.style.color="var(--text-muted)",s.innerHTML=`
				<div>No vaults configured yet.</div>
				<div style="margin-top: 10px;">Click "Add Vault" or "Discover Vaults" to get started.</div>
			`;return}this.plugin.settings.vaults.forEach((s,e)=>{this.createVaultItem(s,e)})}createVaultItem(s,e){let t=this.vaultListContainer.createDiv("vault-item");t.style.padding="10px",t.style.marginBottom="10px",t.style.borderRadius="5px",t.style.backgroundColor="var(--background-secondary)",t.style.border="1px solid var(--background-modifier-border)";let i=t.createDiv("vault-header");i.style.display="flex",i.style.alignItems="center",i.style.justifyContent="space-between",i.style.marginBottom="5px";let a=i.createDiv();a.style.display="flex",a.style.alignItems="center",a.style.gap="10px";let r=a.createDiv();r.style.width="12px",r.style.height="12px",r.style.borderRadius="50%",r.style.backgroundColor=s.color||F[0];let n=a.createEl("strong",{text:s.name});if(!s.isValid){let u=a.createEl("span",{text:"\u26A0 Invalid"});u.style.fontSize="0.85em",u.style.color="var(--text-error)",u.style.marginLeft="5px"}let o=i.createDiv("vault-actions");o.style.display="flex",o.style.gap="5px",new h.ExtraButtonComponent(o).setIcon("pencil").setTooltip("Edit vault").onClick(()=>{this.openEditVaultModal(s,e)}),e>0&&new h.ExtraButtonComponent(o).setIcon("arrow-up").setTooltip("Move up").onClick(async()=>{let u=[...this.plugin.settings.vaults];[u[e-1],u[e]]=[u[e],u[e-1]],this.plugin.settings.vaults=u,await this.plugin.saveSettings(),this.vaultManager.loadVaults(u),this.displayVaultList()}),e<this.plugin.settings.vaults.length-1&&new h.ExtraButtonComponent(o).setIcon("arrow-down").setTooltip("Move down").onClick(async()=>{let u=[...this.plugin.settings.vaults];[u[e],u[e+1]]=[u[e+1],u[e]],this.plugin.settings.vaults=u,await this.plugin.saveSettings(),this.vaultManager.loadVaults(u),this.displayVaultList()}),new h.ExtraButtonComponent(o).setIcon("trash").setTooltip("Remove vault").onClick(async()=>{await this.confirmRemoval(s.name)&&(this.plugin.settings.vaults.splice(e,1),await this.plugin.saveSettings(),this.vaultManager.removeVault(s.id),this.displayVaultList(),new h.Notice(`Removed vault: ${s.name}`))});let c=t.createDiv("vault-details");c.style.fontSize="0.85em",c.style.color="var(--text-muted)";let l=c.createDiv();l.createEl("span",{text:"Path: "});let m=l.createEl("code",{text:s.path});if(m.style.fontSize="0.9em",s.description&&c.createDiv({text:`Description: ${s.description}`}),s.lastAccessed){let u=new Date(s.lastAccessed).toLocaleDateString();c.createDiv({text:`Last accessed: ${u}`})}}async openAddVaultModal(){new M(this.app,this.vaultManager,async s=>{this.plugin.settings.vaults.push(s),await this.plugin.saveSettings(),this.vaultManager.loadVaults(this.plugin.settings.vaults),this.displayVaultList(),new h.Notice(`Added vault: ${s.name}`)}).open()}async openEditVaultModal(s,e){new M(this.app,this.vaultManager,async t=>{this.plugin.settings.vaults[e]=t,await this.plugin.saveSettings(),this.vaultManager.loadVaults(this.plugin.settings.vaults),this.displayVaultList(),new h.Notice(`Updated vault: ${t.name}`)},s).open()}async discoverVaults(){let s=new h.Notice("Discovering vaults...",0);try{let e=await this.vaultManager.discoverVaults();if(e.length===0){s.setMessage("No vaults found in common locations"),setTimeout(()=>s.hide(),3e3);return}let t=new Set(this.plugin.settings.vaults.map(a=>a.path)),i=e.filter(a=>!t.has(a.path));if(i.length===0){s.setMessage("All discovered vaults are already configured"),setTimeout(()=>s.hide(),3e3);return}s.hide(),this.plugin.settings.vaults.push(...i),await this.plugin.saveSettings(),this.vaultManager.loadVaults(this.plugin.settings.vaults),this.displayVaultList(),new h.Notice(`Added ${i.length} vault(s)`)}catch(e){s.setMessage("Error discovering vaults"),console.error("Vault discovery error:",e),setTimeout(()=>s.hide(),3e3)}}async validateAllVaults(){let s=new h.Notice("Validating vaults...",0);try{for(let t of this.plugin.settings.vaults){let i=await this.vaultManager.validateVault(t.path);t.isValid=i.isValid}await this.plugin.saveSettings(),this.displayVaultList();let e=this.plugin.settings.vaults.filter(t=>t.isValid).length;s.setMessage(`Validation complete: ${e}/${this.plugin.settings.vaults.length} valid`),setTimeout(()=>s.hide(),3e3)}catch(e){s.setMessage("Error validating vaults"),console.error("Validation error:",e),setTimeout(()=>s.hide(),3e3)}}async confirmRemoval(s){return confirm(`Are you sure you want to remove the vault "${s}"?

This will only remove it from the Teleporter configuration. The vault itself will not be deleted.`)}createFooter(s){let e=s.createDiv("teleporter-footer");e.style.marginTop="40px",e.style.paddingTop="20px",e.style.borderTop="1px solid var(--background-modifier-border)",e.style.fontSize="0.85em",e.style.color="var(--text-muted)",e.style.textAlign="center",e.createEl("div",{text:"Teleporter v0.1.0"});let t=e.createDiv();t.style.marginTop="5px";let i=t.createEl("a",{text:"GitHub",href:"https://github.com/yourusername/obsidian-teleporter"});i.style.marginRight="10px";let a=t.createEl("a",{text:"Documentation",href:"https://github.com/yourusername/obsidian-teleporter/wiki"})}};var j=require("obsidian"),p=b(require("fs")),f=b(require("path")),z=b(require("crypto")),P=class{constructor(s){this.vaultManager=s,this.activeOperations=new Map,this.tempDir=this.getTempDirectory()}async moveFile(s,e,t,i,a,r){let n=Date.now(),o=this.generateOperationId(),c={sourceFile:s,sourceVault:e,targetVault:t,targetPath:i,timestamp:Date.now(),status:"pending"};this.activeOperations.set(o,c);try{this.reportProgress(r,"preparing",0,"Preparing file move...");let l=f.join(e,s.path),m=f.basename(s.path),u=(0,j.normalizePath)(f.join(i,m));if(this.vaultManager.fileExists(t,u)){let B=await this.handleConflict(t,u,a.conflictStrategy);if(!B)throw new Error("File move cancelled due to conflict");u=B}let T=f.join(t.path,u);this.reportProgress(r,"reading",20,"Reading source file...");let U=await this.readFileContent(l),N=await this.getFileStats(l),A;a.deleteOriginal&&(A=await this.createBackup(l,o),this.reportProgress(r,"reading",30,"Created backup...")),this.reportProgress(r,"writing",40,"Writing to target vault...");let _=f.dirname(T);if(await this.ensureDirectory(_),await this.writeFileContent(T,U),this.reportProgress(r,"writing",60,"File written successfully..."),a.preserveMetadata&&N&&(await this.preserveFileMetadata(T,N),this.reportProgress(r,"writing",70,"Metadata preserved...")),this.reportProgress(r,"verifying",80,"Verifying file integrity..."),!await this.verifyFileCopy(l,T))throw new Error("File verification failed - content mismatch");return a.deleteOriginal&&(this.reportProgress(r,"cleaning",90,"Removing original file..."),await this.deleteFile(l),A&&await this.deleteFile(A)),this.reportProgress(r,"complete",100,"File move completed!"),c.status="success",{success:!0,newPath:u,duration:Date.now()-n}}catch(l){return c.status="failed",c.error=l.message,await this.rollback(o,c),{success:!1,error:l.message,duration:Date.now()-n}}finally{this.activeOperations.delete(o)}}async moveFiles(s,e,t,i,a,r){let n=new Map;for(let o=0;o<s.length;o++){let c=s[o];r&&r(o+1,s.length,c.name);let l=await this.moveFile(c,e,t,i,a);if(n.set(c.path,l),!l.success&&a.conflictStrategy==="ask")break}return n}async handleConflict(s,e,t){switch(t){case"skip":return null;case"overwrite":return e;case"rename":return this.vaultManager.getAvailableFilename(s,e);case"ask":return this.vaultManager.getAvailableFilename(s,e);default:return null}}async readFileContent(s){return new Promise((e,t)=>{p.readFile(s,(i,a)=>{i?t(new Error(`Failed to read file: ${i.message}`)):e(a)})})}async writeFileContent(s,e){return new Promise((t,i)=>{p.writeFile(s,e,a=>{a?i(new Error(`Failed to write file: ${a.message}`)):t()})})}async getFileStats(s){return new Promise(e=>{p.stat(s,(t,i)=>{e(t?null:{created:i.birthtime,modified:i.mtime,size:i.size})})})}async preserveFileMetadata(s,e){return new Promise((t,i)=>{p.utimes(s,e.created,e.modified,a=>{a&&console.warn(`Could not preserve file metadata: ${a.message}`),t()})})}async verifyFileCopy(s,e){try{let t=await this.calculateFileHash(s),i=await this.calculateFileHash(e);return t===i}catch(t){return console.error("File verification failed:",t),!1}}async calculateFileHash(s){return new Promise((e,t)=>{let i=z.createHash("sha256"),a=p.createReadStream(s);a.on("error",t),a.on("data",r=>i.update(r)),a.on("end",()=>e(i.digest("hex")))})}async createBackup(s,e){let t=f.join(this.tempDir,`teleporter_backup_${e}${f.extname(s)}`);return new Promise((i,a)=>{p.copyFile(s,t,r=>{r?a(new Error(`Failed to create backup: ${r.message}`)):i(t)})})}async deleteFile(s){return new Promise((e,t)=>{p.unlink(s,i=>{i&&i.code!=="ENOENT"?t(new Error(`Failed to delete file: ${i.message}`)):e()})})}async ensureDirectory(s){return new Promise((e,t)=>{p.mkdir(s,{recursive:!0},i=>{i?t(new Error(`Failed to create directory: ${i.message}`)):e()})})}async rollback(s,e){try{if(e.targetPath&&e.targetVault){let i=f.join(e.targetVault.path,e.targetPath);p.existsSync(i)&&await this.deleteFile(i)}let t=f.join(this.tempDir,`teleporter_backup_${s}${f.extname(e.sourceFile.path)}`);if(p.existsSync(t)){let i=f.join(e.sourceVault,e.sourceFile.path);p.existsSync(i)||await new Promise((a,r)=>{p.copyFile(t,i,n=>{n?r(n):a(void 0)})}),await this.deleteFile(t)}}catch(t){console.error("Rollback failed:",t)}}reportProgress(s,e,t,i){s&&s({stage:e,percentage:t,message:i})}generateOperationId(){return`op_${Date.now()}_${Math.random().toString(36).substr(2,9)}`}getTempDirectory(){let s=require("os"),e=f.join(s.tmpdir(),"obsidian-teleporter");return p.existsSync(e)||p.mkdirSync(e,{recursive:!0}),e}async cleanupOldBackups(){try{let s=p.readdirSync(this.tempDir),e=Date.now(),t=1440*60*1e3;for(let i of s)if(i.startsWith("teleporter_backup_")){let a=f.join(this.tempDir,i),r=p.statSync(a);e-r.mtime.getTime()>t&&await this.deleteFile(a)}}catch(s){console.error("Failed to clean up old backups:",s)}}isOperationActive(s){for(let e of this.activeOperations.values())if(e.sourceFile.path===s)return!0;return!1}cancelOperation(s){for(let[e,t]of this.activeOperations.entries())if(t.sourceFile.path===s)return t.status="failed",t.error="Operation cancelled by user",this.activeOperations.delete(e),!0;return!1}getStatistics(){let s=this.activeOperations.size,e=0,t=0;for(let i of this.activeOperations.values())i.status==="success"&&e++,i.status==="failed"&&t++;return{active:s,completed:e,failed:t}}};var V=require("obsidian"),L=class extends V.Modal{constructor(e,t,i,a,r,n){super(e);this.selectedVault=null;this.plugin=t,this.vaultManager=i,this.currentVaultPath=r,this.onSelect=n,this.vaults=a.filter(o=>o.path!==r&&o.isValid),this.filteredVaults=[...this.vaults],this.sortVaults()}onOpen(){let{contentEl:e}=this;if(e.empty(),e.addClass("teleporter-vault-selector"),e.style.minHeight="400px",e.style.maxHeight="600px",e.createEl("h2",{text:"Select Destination Vault"}),this.vaults.length===0){this.showNoVaultsMessage();return}let t=e.createDiv("vault-selector-instructions");t.style.fontSize="0.85em",t.style.color="var(--text-muted)",t.style.marginBottom="10px",t.innerHTML="Press <kbd>1</kbd>-<kbd>9</kbd> for quick selection \u2022 <kbd>\u2191</kbd><kbd>\u2193</kbd> to navigate \u2022 <kbd>Enter</kbd> to confirm";let i=e.createDiv("vault-search-container");i.style.marginBottom="15px",new V.Setting(i).setName("Search vaults").addText(n=>(this.searchInput=n,n.setPlaceholder("Type to filter vaults...").onChange(o=>{this.filterVaults(o)}),setTimeout(()=>{n.inputEl.focus()},100),n)),this.vaultListContainer=e.createDiv("vault-list-container"),this.vaultListContainer.style.maxHeight="350px",this.vaultListContainer.style.overflowY="auto",this.vaultListContainer.style.marginBottom="15px",this.vaultListContainer.style.border="1px solid var(--background-modifier-border)",this.vaultListContainer.style.borderRadius="5px",this.vaultListContainer.style.padding="5px",this.displayVaults();let a=e.createDiv("modal-button-container");a.style.display="flex",a.style.justifyContent="flex-end",a.style.gap="10px",new V.ButtonComponent(a).setButtonText("Cancel").onClick(()=>{this.close()});let r=new V.ButtonComponent(a).setButtonText("Select Vault").setCta().setDisabled(!0).onClick(()=>{this.selectedVault&&(this.onSelect(this.selectedVault),this.close())});this.selectButton=r,this.setupKeyboardNavigation()}showNoVaultsMessage(){let{contentEl:e}=this,t=e.createDiv("empty-vaults-message");t.style.padding="40px 20px",t.style.textAlign="center",t.style.color="var(--text-muted)",t.createEl("div",{text:"No destination vaults available"});let i=t.createDiv();i.style.marginTop="10px",i.style.fontSize="0.9em",this.plugin.settings.vaults.length<=1?i.innerHTML=`
				Only the current vault is configured.<br>
				Please add more vaults in the settings.
			`:i.innerHTML=`
				All configured vaults are either invalid or the current vault.<br>
				Please check your vault configuration in settings.
			`;let a=e.createDiv();a.style.marginTop="20px",a.style.textAlign="center",new V.ButtonComponent(a).setButtonText("Open Settings").setCta().onClick(()=>{this.close(),this.app.setting.open(),this.app.setting.openTabById(this.plugin.manifest.id)})}sortVaults(){this.vaults.sort((e,t)=>e.id===this.plugin.settings.lastUsedVaultId?-1:t.id===this.plugin.settings.lastUsedVaultId?1:e.lastAccessed&&t.lastAccessed?t.lastAccessed-e.lastAccessed:e.name.localeCompare(t.name))}filterVaults(e){let t=e.toLowerCase().trim();t?this.filteredVaults=this.vaults.filter(i=>i.name.toLowerCase().includes(t)||i.path.toLowerCase().includes(t)||i.description&&i.description.toLowerCase().includes(t)):this.filteredVaults=[...this.vaults],this.displayVaults()}displayVaults(){if(this.vaultListContainer.empty(),this.filteredVaults.length===0){let e=this.vaultListContainer.createDiv("empty-search-message");e.style.padding="20px",e.style.textAlign="center",e.style.color="var(--text-muted)",e.textContent="No vaults match your search";return}this.filteredVaults.forEach((e,t)=>{this.createVaultItem(e,t)})}createVaultItem(e,t){let i=this.vaultListContainer.createDiv("vault-selector-item");i.style.padding="10px",i.style.marginBottom="5px",i.style.borderRadius="5px",i.style.cursor="pointer",i.style.backgroundColor="var(--background-secondary)",i.style.border="2px solid transparent",i.style.transition="all 0.2s ease",i.setAttribute("data-vault-index",t.toString());let a=i.createDiv("vault-item-header");if(a.style.display="flex",a.style.alignItems="center",a.style.gap="10px",a.style.marginBottom="5px",t<9){let l=a.createDiv();l.style.width="20px",l.style.height="20px",l.style.borderRadius="3px",l.style.backgroundColor="var(--background-modifier-border)",l.style.display="flex",l.style.alignItems="center",l.style.justifyContent="center",l.style.fontSize="0.75em",l.style.fontWeight="bold",l.style.flexShrink="0",l.textContent=(t+1).toString(),l.title=`Press ${t+1} to select`}let r=a.createDiv();r.style.width="12px",r.style.height="12px",r.style.borderRadius="50%",r.style.backgroundColor=e.color||"#7c3aed",r.style.flexShrink="0";let n=a.createEl("strong",{text:e.name});n.style.flex="1";let o=a.createDiv();if(o.style.display="flex",o.style.gap="5px",e.id===this.plugin.settings.lastUsedVaultId){let l=o.createEl("span",{text:"Recent"});l.style.fontSize="0.75em",l.style.padding="2px 6px",l.style.borderRadius="3px",l.style.backgroundColor="var(--interactive-accent)",l.style.color="var(--text-on-accent)"}let c=i.createDiv("vault-item-path");if(c.style.fontSize="0.85em",c.style.color="var(--text-muted)",c.style.fontFamily="monospace",c.textContent=e.path,e.description){let l=i.createDiv("vault-item-description");l.style.fontSize="0.85em",l.style.color="var(--text-muted)",l.style.marginTop="3px",l.textContent=e.description}i.addEventListener("mouseenter",()=>{this.isSelected(e)||(i.style.backgroundColor="var(--background-modifier-hover)")}),i.addEventListener("mouseleave",()=>{this.isSelected(e)||(i.style.backgroundColor="var(--background-secondary)")}),i.addEventListener("click",()=>{this.selectVault(e,i)}),i.addEventListener("dblclick",()=>{this.selectVault(e,i),this.selectedVault&&(this.onSelect(this.selectedVault),this.close())})}selectVault(e,t){this.vaultListContainer.querySelectorAll(".vault-selector-item").forEach(i=>{i.style.backgroundColor="var(--background-secondary)",i.style.border="2px solid transparent"}),this.selectedVault=e,t.style.backgroundColor="var(--background-modifier-hover)",t.style.border="2px solid var(--interactive-accent)",this.selectButton&&this.selectButton.setDisabled(!1)}isSelected(e){var t;return((t=this.selectedVault)==null?void 0:t.id)===e.id}setupKeyboardNavigation(){this.contentEl.addEventListener("keydown",e=>{let t=this.vaultListContainer.querySelectorAll(".vault-selector-item");if(t.length===0)return;if(e.key>="1"&&e.key<="9"){let a=parseInt(e.key)-1;if(a<this.filteredVaults.length&&a<9){e.preventDefault();let r=this.filteredVaults[a],n=t[a];this.selectVault(r,n),n.scrollIntoView({block:"nearest"}),(e.ctrlKey||e.metaKey)&&(this.onSelect(r),this.close())}return}let i=-1;switch(this.selectedVault&&(i=this.filteredVaults.findIndex(a=>{var r;return a.id===((r=this.selectedVault)==null?void 0:r.id)})),e.key){case"ArrowUp":if(e.preventDefault(),i>0){let a=this.filteredVaults[i-1],r=t[i-1];this.selectVault(a,r),r.scrollIntoView({block:"nearest"})}else if(i===-1&&t.length>0){let a=this.filteredVaults[t.length-1],r=t[t.length-1];this.selectVault(a,r),r.scrollIntoView({block:"nearest"})}break;case"ArrowDown":if(e.preventDefault(),i<t.length-1&&i!==-1){let a=this.filteredVaults[i+1],r=t[i+1];this.selectVault(a,r),r.scrollIntoView({block:"nearest"})}else if(i===-1&&t.length>0){let a=this.filteredVaults[0],r=t[0];this.selectVault(a,r),r.scrollIntoView({block:"nearest"})}break;case"Enter":e.preventDefault(),this.selectedVault&&(this.onSelect(this.selectedVault),this.close());break;case"Escape":e.preventDefault(),this.close();break}})}onClose(){let{contentEl:e}=this;e.empty()}};var v=require("obsidian"),k=b(require("path")),I=class extends v.Modal{constructor(e,t,i,a,r){super(e);this.selectedFolder="/";this.allFolders=[];this.filteredFolders=[];this.expandedFolders=new Set(["/"]);this.recentFolders=[];this.isCreatingFolder=!1;this.plugin=t,this.vaultManager=i,this.vault=a,this.onSelect=r,this.recentFolders=this.plugin.getRecentDestinations(a.id)}async onOpen(){let{contentEl:e}=this;e.empty(),e.addClass("teleporter-folder-selector"),e.style.minHeight="450px",e.style.maxHeight="650px",e.createEl("h2",{text:`Select Folder in ${this.vault.name}`});let t=e.createDiv("loading-indicator");t.style.textAlign="center",t.style.padding="20px",t.textContent="Loading folder structure...";try{this.allFolders=await this.vaultManager.getVaultFolders(this.vault),this.filteredFolders=[...this.allFolders],this.buildFolderTree(),t.remove(),this.buildUI(e)}catch(i){t.textContent="Failed to load folders",t.style.color="var(--text-error)",console.error("Failed to load vault folders:",i);let a=new v.ButtonComponent(t).setButtonText("Retry").onClick(async()=>{await this.onOpen()})}}buildUI(e){this.recentFolders.length>0&&this.createRecentFoldersSection(e);let t=e.createDiv("folder-search-container");t.style.marginBottom="10px",new v.Setting(t).setName("Search folders").addText(l=>(this.searchInput=l,l.setPlaceholder("Type to filter folders...").onChange(m=>{this.filterFolders(m)}),l));let i=e.createDiv("folder-toolbar");i.style.marginBottom="10px",i.style.display="flex",i.style.gap="10px",new v.ButtonComponent(i).setButtonText("New Folder").setIcon("folder-plus").onClick(()=>{this.showNewFolderInput()});let a=e.createDiv("new-folder-container");a.style.display="none",a.style.marginBottom="10px",a.style.padding="10px",a.style.backgroundColor="var(--background-secondary)",a.style.borderRadius="5px";let r=new v.Setting(a).setName("New folder name").addText(l=>(this.newFolderInput=l,l.setPlaceholder("folder-name"),l.inputEl.addEventListener("keydown",m=>{m.key==="Enter"?(m.preventDefault(),this.createNewFolder()):m.key==="Escape"&&(m.preventDefault(),this.hideNewFolderInput())}),l)).addButton(l=>l.setButtonText("Create").setCta().onClick(()=>{this.createNewFolder()})).addButton(l=>l.setButtonText("Cancel").onClick(()=>{this.hideNewFolderInput()}));this.newFolderContainer=a,this.folderTreeContainer=e.createDiv("folder-tree-container"),this.folderTreeContainer.style.maxHeight="300px",this.folderTreeContainer.style.overflowY="auto",this.folderTreeContainer.style.marginBottom="15px",this.folderTreeContainer.style.border="1px solid var(--background-modifier-border)",this.folderTreeContainer.style.borderRadius="5px",this.folderTreeContainer.style.padding="5px",this.displayFolderTree();let n=e.createDiv("selected-folder-display");n.style.marginBottom="15px",n.style.padding="10px",n.style.backgroundColor="var(--background-secondary)",n.style.borderRadius="5px";let o=n.createEl("span",{text:"Selected: "});o.style.fontWeight="bold",this.selectedFolderDisplay=n.createEl("code",{text:this.selectedFolder}),this.selectedFolderDisplay.style.marginLeft="5px";let c=e.createDiv("modal-button-container");c.style.display="flex",c.style.justifyContent="flex-end",c.style.gap="10px",new v.ButtonComponent(c).setButtonText("Cancel").onClick(()=>{this.close()}),new v.ButtonComponent(c).setButtonText("Select Folder").setCta().onClick(()=>{this.onSelect(this.selectedFolder),this.plugin.addRecentDestination(this.vault.id,this.selectedFolder),this.close()}),this.setupKeyboardNavigation(),setTimeout(()=>{var l;(l=this.searchInput)==null||l.inputEl.focus()},100)}createRecentFoldersSection(e){let t=e.createDiv("recent-folders-section");t.style.marginBottom="15px";let i=t.createEl("h3",{text:"Recent Folders"});i.style.fontSize="0.9em",i.style.marginBottom="5px";let a=t.createDiv("recent-folders-list");a.style.display="flex",a.style.flexWrap="wrap",a.style.gap="5px",this.recentFolders.slice(0,5).forEach(r=>{let n=a.createEl("button",{text:r==="/"?"Root":k.basename(r)});n.className="recent-folder-chip",n.style.padding="3px 8px",n.style.fontSize="0.85em",n.style.borderRadius="3px",n.style.border="1px solid var(--background-modifier-border)",n.style.backgroundColor="var(--background-secondary)",n.style.cursor="pointer",n.title=r,n.addEventListener("click",()=>{this.selectFolder(r)}),n.addEventListener("mouseenter",()=>{n.style.backgroundColor="var(--background-modifier-hover)"}),n.addEventListener("mouseleave",()=>{n.style.backgroundColor="var(--background-secondary)"})})}buildFolderTree(){this.folderTree={path:"/",name:"Root",level:0,isExpanded:!0,hasChildren:!1,children:[]};let e=new Map;e.set("/",this.folderTree);let t=[...this.allFolders].sort();for(let i of t){if(i==="/")continue;let a=i.split("/").filter(o=>o),r="",n=this.folderTree;for(let o=0;o<a.length;o++)if(r="/"+a.slice(0,o+1).join("/"),e.has(r))n=e.get(r);else{let c={path:r,name:a[o],level:o+1,isExpanded:this.expandedFolders.has(r),hasChildren:!1,children:[]};n.children.push(c),n.hasChildren=!0,e.set(r,c),n=c}}}filterFolders(e){let t=e.toLowerCase().trim();t?(this.filteredFolders=this.allFolders.filter(i=>{let a=k.basename(i).toLowerCase(),r=i.toLowerCase();return a.includes(t)||r.includes(t)}),t&&this.allFolders.forEach(i=>this.expandedFolders.add(i))):this.filteredFolders=[...this.allFolders],this.buildFolderTree(),this.displayFolderTree()}displayFolderTree(){if(this.folderTreeContainer.empty(),this.filteredFolders.length===0){let e=this.folderTreeContainer.createDiv("empty-folder-message");e.style.padding="20px",e.style.textAlign="center",e.style.color="var(--text-muted)",e.textContent="No folders match your search";return}this.displayFolderNode(this.folderTree,this.folderTreeContainer)}displayFolderNode(e,t){var o;if((o=this.searchInput)!=null&&o.getValue()&&!this.filteredFolders.includes(e.path)){let c=!1,l=m=>{for(let u of m.children)if(this.filteredFolders.includes(u.path)||l(u))return!0;return!1};if(!l(e))return}let i=t.createDiv("folder-tree-item");i.style.paddingLeft=`${e.level*20}px`,i.style.padding=`5px 5px 5px ${e.level*20+5}px`,i.style.cursor="pointer",i.style.borderRadius="3px",i.style.userSelect="none";let a=i.createDiv("folder-row");if(a.style.display="flex",a.style.alignItems="center",a.style.gap="5px",e.hasChildren){let c=a.createEl("span",{text:e.isExpanded?"\u25BC":"\u25B6"});c.style.fontSize="0.8em",c.style.width="10px",c.style.flexShrink="0",c.addEventListener("click",l=>{l.stopPropagation(),this.toggleFolder(e)})}else{let c=a.createDiv();c.style.width="10px",c.style.flexShrink="0"}let r=a.createEl("span",{text:"\u{1F4C1}"});r.style.fontSize="0.9em",r.style.flexShrink="0";let n=a.createEl("span",{text:e.name});if(n.style.flex="1",e.path===this.selectedFolder&&(i.style.backgroundColor="var(--interactive-accent)",i.style.color="var(--text-on-accent)"),i.addEventListener("mouseenter",()=>{e.path!==this.selectedFolder&&(i.style.backgroundColor="var(--background-modifier-hover)")}),i.addEventListener("mouseleave",()=>{e.path!==this.selectedFolder&&(i.style.backgroundColor="transparent")}),i.addEventListener("click",()=>{this.selectFolder(e.path)}),e.isExpanded&&e.hasChildren)for(let c of e.children)this.displayFolderNode(c,t)}toggleFolder(e){e.isExpanded=!e.isExpanded,e.isExpanded?this.expandedFolders.add(e.path):this.expandedFolders.delete(e.path),this.displayFolderTree()}selectFolder(e){this.selectedFolder=e,this.selectedFolderDisplay.textContent=e,this.displayFolderTree()}showNewFolderInput(){if(this.isCreatingFolder)return;this.isCreatingFolder=!0,this.newFolderContainer.style.display="block";let e=this.selectedFolder==="/"?"":this.selectedFolder;this.newFolderInput.setValue(""),this.newFolderInput.setPlaceholder(`${e}/new-folder`),setTimeout(()=>{this.newFolderInput.inputEl.focus()},50)}hideNewFolderInput(){this.isCreatingFolder=!1,this.newFolderContainer.style.display="none",this.newFolderInput.setValue("")}async createNewFolder(){let e=this.newFolderInput.getValue().trim();if(!e){new v.Notice("Please enter a folder name");return}if(e.includes("\\")||e.includes(":")){new v.Notice("Invalid folder name");return}let i=`${this.selectedFolder==="/"?"":this.selectedFolder}/${e}`.replace(/\/+/g,"/");if(this.allFolders.includes(i)){new v.Notice("Folder already exists");return}try{let a=k.join(this.vault.path,i);await this.vaultManager.ensureDirectory(a),this.allFolders.push(i),this.filteredFolders.push(i),this.buildFolderTree(),this.displayFolderTree(),this.selectFolder(i),this.hideNewFolderInput(),new v.Notice(`Created folder: ${e}`)}catch(a){console.error("Failed to create folder:",a),new v.Notice("Failed to create folder")}}setupKeyboardNavigation(){this.contentEl.addEventListener("keydown",e=>{e.target instanceof HTMLInputElement||e.target instanceof HTMLTextAreaElement||e.key==="Escape"&&(e.preventDefault(),this.close())})}onClose(){let{contentEl:e}=this;e.empty()}};var O=class extends C.Plugin{async onload(){console.log("Loading Teleporter plugin"),this.vaultManager=new E,this.fileMover=new P(this.vaultManager),await this.loadSettings(),this.vaultManager.loadVaults(this.settings.vaults),this.addCommand({id:"teleport-current-file",name:"Teleport current file to another vault",callback:()=>{this.teleportCurrentFile()}}),this.addCommand({id:"open-teleporter-settings",name:"Open Teleporter settings",callback:()=>{this.app.setting.open(),this.app.setting.openTabById(this.manifest.id)}}),this.addRibbonIcon("send","Teleport current file",e=>{this.teleportCurrentFile()}).addClass("teleporter-ribbon-icon"),this.addSettingTab(new S(this.app,this,this.vaultManager)),this.validateVaultsOnStartup(),setTimeout(()=>{this.fileMover.cleanupOldBackups()},5e3),console.log("Teleporter plugin loaded")}onunload(){console.log("Unloading Teleporter plugin"),this.fileMover.cleanupOldBackups()}async loadSettings(){this.settings=Object.assign({},x,await this.loadData()),this.settings.vaults||(this.settings.vaults=[]),this.settings.recentDestinations||(this.settings.recentDestinations=[]),this.settings.deleteOriginalAfterMove===void 0&&(this.settings.deleteOriginalAfterMove=x.deleteOriginalAfterMove),this.settings.preserveFileHistory===void 0&&(this.settings.preserveFileHistory=x.preserveFileHistory),this.settings.showConfirmation===void 0&&(this.settings.showConfirmation=x.showConfirmation)}async saveSettings(){await this.saveData(this.settings)}async validateVaultsOnStartup(){this.settings.vaults.length!==0&&setTimeout(async()=>{let s=0;for(let e of this.settings.vaults){let t=await this.vaultManager.validateVault(e.path);!t.isValid&&e.isValid?(e.isValid=!1,s++):t.isValid&&!e.isValid&&(e.isValid=!0)}s>0&&(await this.saveSettings(),new C.Notice(`${s} vault(s) are no longer accessible`))},1e3)}async teleportCurrentFile(){let s=this.app.workspace.getActiveFile();if(!s){new C.Notice("No active file to teleport");return}let e=this.settings.vaults.filter(t=>t.isValid);if(e.length===0){this.settings.vaults.length===0?(new C.Notice("No vaults configured. Please configure vaults in settings."),this.app.setting.open(),this.app.setting.openTabById(this.manifest.id)):new C.Notice("No valid vaults available. Please check vault configuration.");return}if(e.length===1){let t=this.app.vault.adapter.basePath;if(e[0].path===t){new C.Notice("The only configured vault is the current vault. Please add another vault.");return}}new L(this.app,this,this.vaultManager,e,this.getCurrentVaultPath(),async t=>{this.settings.lastUsedVaultId=t.id,await this.saveSettings(),new I(this.app,this,this.vaultManager,t,async i=>{await this.performFileMove(s,t,i)}).open()}).open()}getCurrentVaultPath(){return this.app.vault.adapter.basePath||""}isCurrentVault(s){let e=this.getCurrentVaultPath();return s.path===e}getRecentDestinations(s){return this.settings.recentDestinations?this.settings.recentDestinations.filter(e=>e.vaultId===s).sort((e,t)=>t.timestamp-e.timestamp).slice(0,5).map(e=>e.path):[]}async addRecentDestination(s,e){this.settings.recentDestinations||(this.settings.recentDestinations=[]),this.settings.recentDestinations=this.settings.recentDestinations.filter(t=>!(t.vaultId===s&&t.path===e)),this.settings.recentDestinations.push({vaultId:s,path:e,timestamp:Date.now()}),this.settings.recentDestinations.length>20&&(this.settings.recentDestinations=this.settings.recentDestinations.sort((t,i)=>i.timestamp-t.timestamp).slice(0,20)),await this.saveSettings()}getStatistics(){var s,e;return{totalVaults:this.settings.vaults.length,validVaults:this.settings.vaults.filter(t=>t.isValid).length,recentDestinations:((s=this.settings.recentDestinations)==null?void 0:s.length)||0,lastUsedVault:this.settings.lastUsedVaultId?(e=this.vaultManager.getVault(this.settings.lastUsedVaultId))==null?void 0:e.name:null}}async performFileMove(s,e,t){var r;if(this.fileMover.isOperationActive(s.path)){new C.Notice("A move operation is already in progress for this file");return}if(this.settings.showConfirmation){let n=this.settings.deleteOriginalAfterMove?`Move "${s.name}" to ${e.name}?

The original file will be deleted.`:`Copy "${s.name}" to ${e.name}?

The original file will be kept.`;if(!confirm(n))return}let i={deleteOriginal:this.settings.deleteOriginalAfterMove,preserveMetadata:this.settings.preserveFileHistory,showProgress:!0,conflictStrategy:"rename"},a=new C.Notice("",0);try{let n=await this.fileMover.moveFile(s,this.getCurrentVaultPath(),e,t,i,o=>{a.setMessage(o.message)});if(a.hide(),n.success){let o=this.settings.deleteOriginalAfterMove?"moved":"copied";if(new C.Notice(`Successfully ${o} "${s.name}" to ${e.name}`,5e3),this.settings.deleteOriginalAfterMove){let c=this.app.workspace.getLeavesOfType("markdown");for(let l of c)((r=l.view.file)==null?void 0:r.path)===s.path&&l.detach()}}else new C.Notice(`Failed to move file: ${n.error}`,5e3)}catch(n){a.hide(),console.error("File move error:",n),new C.Notice(`Error moving file: ${n.message}`,5e3)}}};
